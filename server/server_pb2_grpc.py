# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import server_pb2 as server__pb2


class SessionManagerStub(object):
  """The Session service definition.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.create = channel.unary_unary(
        '/server.SessionManager/create',
        request_serializer=server__pb2.newSession.SerializeToString,
        response_deserializer=server__pb2.Session.FromString,
        )
    self.join = channel.unary_unary(
        '/server.SessionManager/join',
        request_serializer=server__pb2.JoinRequest.SerializeToString,
        response_deserializer=server__pb2.Session.FromString,
        )
    self.leave = channel.unary_unary(
        '/server.SessionManager/leave',
        request_serializer=server__pb2.LeaveRequest.SerializeToString,
        response_deserializer=server__pb2.LeaveReply.FromString,
        )
    self.setMax = channel.unary_unary(
        '/server.SessionManager/setMax',
        request_serializer=server__pb2.SetMaxPlayers.SerializeToString,
        response_deserializer=server__pb2.Session.FromString,
        )
    self.list = channel.unary_unary(
        '/server.SessionManager/list',
        request_serializer=server__pb2.ListRequest.SerializeToString,
        response_deserializer=server__pb2.ListReply.FromString,
        )


class SessionManagerServicer(object):
  """The Session service definition.
  """

  def create(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def join(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def leave(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def setMax(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def list(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_SessionManagerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'create': grpc.unary_unary_rpc_method_handler(
          servicer.create,
          request_deserializer=server__pb2.newSession.FromString,
          response_serializer=server__pb2.Session.SerializeToString,
      ),
      'join': grpc.unary_unary_rpc_method_handler(
          servicer.join,
          request_deserializer=server__pb2.JoinRequest.FromString,
          response_serializer=server__pb2.Session.SerializeToString,
      ),
      'leave': grpc.unary_unary_rpc_method_handler(
          servicer.leave,
          request_deserializer=server__pb2.LeaveRequest.FromString,
          response_serializer=server__pb2.LeaveReply.SerializeToString,
      ),
      'setMax': grpc.unary_unary_rpc_method_handler(
          servicer.setMax,
          request_deserializer=server__pb2.SetMaxPlayers.FromString,
          response_serializer=server__pb2.Session.SerializeToString,
      ),
      'list': grpc.unary_unary_rpc_method_handler(
          servicer.list,
          request_deserializer=server__pb2.ListRequest.FromString,
          response_serializer=server__pb2.ListReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'server.SessionManager', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
